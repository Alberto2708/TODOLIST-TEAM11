version: 0.1
component: build
timeoutInSeconds: 600
runAs: root
shell: bash

env:
  variables:
    JAVA_HOME: "javahome"
    IMAGE_NAME: "todolistapp-springboot"
    IMAGE_VERSION: "0.1"
    DOCKER_REGISTRY: "qro.ocir.io/a01637667/reacttodo/dcfkg/todolistapp-springboot"
    # <<< SECURITY NOTE: Store these in OCI Vault or Pipeline Parameters instead of hardcoding!
    OCI_USERNAME: "a01637667/a01637667@tec.mx"  # Format: "tenancy-namespace/username"
    # <<< Remove OCI_AUTH_TOKEN from here! Pass it as a pipeline parameter instead.

  exportedVariables:
    - IMAGE

steps:
  - type: Command
    name: "Prepare Environment"
    timeoutInSeconds: 300
    command: |
      if ! command -v docker &> /dev/null; then
        echo "Installing Docker..."
        yum install -y docker-engine
        systemctl start docker
      else
        echo "Docker is already installed"
      fi

  - type: Command
    name: "Docker Login"
    timeoutInSeconds: 60
    command: |
      # <<< Improved registry domain extraction
      REGISTRY_DOMAIN=${DOCKER_REGISTRY%%/*}
      echo "Logging into: ${REGISTRY_DOMAIN}"
      
      # <<< Critical: Use --password-stdin to avoid TTY error
      echo "${AUTH_TOKEN}" | docker login -u "${OCI_USERNAME}" --password-stdin "${REGISTRY_DOMAIN}"
      
      if [ $? -ne 0 ]; then
        echo "ERROR: Docker login failed. Possible issues:"
        echo "1. Invalid auth token (generate a new one in OCI Console)"
        echo "2. Incorrect username format (must be: 'tenancy-namespace/username')"
        echo "3. Registry domain mismatch (used: ${REGISTRY_DOMAIN})"
        exit 1
      fi

  - type: Command
    name: "Build and Push Docker Image"
    timeoutInSeconds: 600
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/oci-react-samples/MtdrSprint/backend
      export IMAGE="${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_VERSION}"
      
      mvn clean package spring-boot:repackage
      docker build -t "$IMAGE" -f Dockerfile .
      docker push "$IMAGE" && docker rmi "$IMAGE"  # <<< Combined push/cleanup

outputArtifacts:
  - name: "DockerImage"
    type: DOCKER_IMAGE
    location: "${IMAGE}"