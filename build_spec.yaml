version: 0.1
component: build
timeoutInSeconds: 600
runAs: root
shell: bash

env:
  variables:
    DOCKER_REGISTRY: "qro.ocir.io/axmgmaaw28rg/reacttodo/dcfkg/todolistapp-springboot"
    # <<< SECURITY NOTE: Store these in OCI Vault or Pipeline Parameters instead of hardcoding!
    OCI_USERNAME: "axmgmaaw28rg/a01637667@tec.mx"  # Format: "tenancy-namespace/username"
    # <<< Remove OCI_AUTH_TOKEN from here! Pass it as a pipeline parameter instead.
  exportedVariables:
    - IMAGE

steps:
  - type: Command
    name: "Prepare Environment"
    timeoutInSeconds: 300
    command: |
      if ! command -v docker &> /dev/null; then
        echo "Installing Docker..."
        yum install -y docker-engine
        systemctl start docker
      else
        echo "Docker is already installed"
      fi

      echo "Checking Java version..."
      if command -v java &> /dev/null; then
        CURRENT_VERSION=$(java -version 2>&1 | awk -F[\".] '/version/ {print $2}')
        echo "Detected Java major version: $CURRENT_VERSION"
        if [ "$CURRENT_VERSION" -ne 11 ]; then
          echo "Removing incorrect Java version (detected $CURRENT_VERSION)..."
          yum remove -y java-1.* java-17-openjdk* java-18-openjdk* java-19-openjdk* || true
          echo "Installing OpenJDK 11..."
          yum install -y java-11-openjdk-devel
        else
          echo "Java 11 already installed"
        fi
      else
        echo "Java not found, installing OpenJDK 11..."
        yum install -y java-11-openjdk-devel
      fi

      echo "Setting JAVA_HOME to Java 11..."
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
      echo "JAVA_HOME set to $JAVA_HOME"
      java -version

  - type: Command
    name: "Docker Login"
    timeoutInSeconds: 60
    command: |
      # <<< Improved registry domain extraction
      REGISTRY_DOMAIN=${DOCKER_REGISTRY%%/*}
      echo "Logging into: ${REGISTRY_DOMAIN}"
      echo "Using OCI_USERNAME: ${OCI_USERNAME}"
      echo "Registry domain: ${REGISTRY_DOMAIN}"
      
      # <<< Critical: Use --password-stdin to avoid TTY error
      echo "${AUTH_TOKEN}" | docker login -u "${OCI_USERNAME}" --password-stdin "${REGISTRY_DOMAIN}"
      
      if [ $? -ne 0 ]; then
        echo "ERROR: Docker login failed. Possible issues:"
        echo "1. Invalid auth token (generate a new one in OCI Console)"
        echo "2. Incorrect username format (must be: 'tenancy-namespace/username')"
        echo "3. Registry domain mismatch (used: ${REGISTRY_DOMAIN})"
        exit 1
      fi

  - type: Command
    name: "Build and Push Docker Image"
    timeoutInSeconds: 600
    command: |
      echo "Starting Docker build process"
      pwd
      cd ${OCI_PRIMARY_SOURCE_DIR}/oci-react-samples/MtdrSpring/backend
      
      # Attempt to get DOCKER_REGISTRY from pipeline state
      if [ -z "$DOCKER_REGISTRY" ]; then
        export DOCKER_REGISTRY=$(state_get DOCKER_REGISTRY)
        echo "DOCKER_REGISTRY retrieved from state: $DOCKER_REGISTRY"
      fi
      
      # Check again if DOCKER_REGISTRY was set successfully
      if [ -z "$DOCKER_REGISTRY" ]; then
        echo "Error: DOCKER_REGISTRY env variable needs to be set!"
        exit 1
      fi

      # Compose full image tag
      export IMAGE="${DOCKER_REGISTRY}:${IMAGE_VERSION}"
      echo "Using IMAGE tag: $IMAGE"

      echo "Running Maven build"
      mvn clean package spring-boot:repackage -DskipTests

      echo "Building Docker image"
      docker build -f Dockerfile -t $IMAGE .

      echo "Pushing Docker image"
      docker push $IMAGE      
    
    onFailure: 
      - type: Command
        name: "Handle Failure"
        command: |
          echo "Build or push failed. Please check the logs for details."
        timeoutInSeconds: 60
        runAs: root

outputArtifacts:
  - name: "DockerImage"
    type: DOCKER_IMAGE
    location: "${IMAGE}"
  - name: "todolistapp-springboot_yaml"
    type: BINARY
    location: "${OCI_PRIMARY_SOURCE_DIR}/oci-react-samples/MtdrSpring/backend/src/main/resources/todolistapp-springboot.yaml"